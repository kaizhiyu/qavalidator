plugins {
    // provides configurations for annotation processing, and passes the annotation processor to
    // the javac "-processorpath" option:
    id "net.ltgt.apt" version "0.19"
}

apply plugin: 'groovy'

compileGroovy {
    groovyOptions.javaAnnotationProcessing = true
    aptOptions.processorArgs = [genDocDir: project(':qav-doc').projectDir.absolutePath + "/src-gen/generated-docs"]
}

dependencies {
    compile project(':qav-analysis-dsl')
    compile project(':qav-architecture')
    compile project(':qav-architecture-dsl')
    compile project(':qav-graph')
    compile project(':qav-graph-db')
    compile project(':qav-input-java')
    compile project(':qav-input-maven')
    compile project(':qav-input-traces')
    compile project(':qav-input-typescript')
    compile project(':util:qav-util')
    compile project(':qav-visualization')

    compileOnly project(':util:qav-doc-generator')         // qav-doc-generator contains the annotations; not required at runtime.
    annotationProcessor project(':util:qav-doc-generator') // qav-doc-generator contains the doc generator; not required at runtime.

    compile "org.slf4j:slf4j-api:${project.ext.slf4jVersion}"
    compile "ch.qos.logback:logback-core:${project.ext.logbackVersion}"
    compile "ch.qos.logback:logback-classic:${project.ext.logbackVersion}"

    compile "org.codehaus.groovy:groovy-all:${project.ext.groovyVersion}"
}

// since this project's build run creates these files using qav-doc-generator, we're responsible for cleanup as well
task deleteGeneratedDoc(type: Delete) {
    delete project(':qav-doc').projectDir.absolutePath + "/src-gen"
}

clean.dependsOn deleteGeneratedDoc

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    archiveClassifier = 'javadoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives groovydocJar
}
