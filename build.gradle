plugins {
    id "org.sonarqube" version "2.6.2"
    id 'net.researchgate.release' version '2.8.0'
    id "com.jfrog.bintray" version "1.8.4"
}

sonarqube {
    properties {
        property "sonar.projectName", "QAvalidator"
        property "sonar.exclusions", "**/*.html,**/*.css,**/*.js"
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'jacoco'

    // for publishing via Bintray
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    group = 'de.qaware.qav'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
        mavenCentral()
    }

    release {
        failOnCommitNeeded = true
        failOnPublishNeeded = false
        failOnSnapshotDependencies = true
        failOnUnversionedFiles = true
        failOnUpdateNeeded = true
        revertOnFail = true
        preCommitText = '[Gradle Release Plugin] '
        preTagCommitMessage = '- pre tag commit: '
        tagCommitMessage = '- creating tag: '
        newVersionCommitMessage = '- new version commit: '
        tagTemplate = 'release-${version}'
        versionPropertyFile = 'gradle.properties'
        versionProperties = []
        buildTasks = ['build']

        git {
            requireBranch = '' // allow releases from any branch
        }
    }

    ext {
        // Version numbers
        springBootVersion = "2.1.0.RELEASE"
        springVersion = "5.1.2.RELEASE"
        springDataVersion = "2.1.2.RELEASE"
        springDataNeo4jVersion = "5.1.3.RELEASE"
        springDataOgmVersion = "3.1.5"

        jgraphtVersion = "1.3.0"
        groovyVersion = "2.5.4" // upgrading must be done in sync with the Gradle version to avoid problems in the build process

        asmVersion = "7.0"
        luceneVersion = "7.5.0"
        stringtemplateVersion = "3.2.1"

        antVersion = "1.10.5"
        jacksonVersion = "2.9.7"
        guavaVersion = "27.0-jre"
        commonsLang3Version = "3.8.1"

        slf4jVersion = "1.7.25"
        logbackVersion = "1.2.3"

        lombokVersion = "1.18.4"

        // Test dependencies
        junitVersion = "4.12"
        mockitoVersion = "2.23.4"
        hamcrestVersion = "1.3"
        assertjVersion = "3.11.1"
        googleTestingCompileVersion = '0.15'

        jacocoToolVersion = "0.8.2"
    }

    dependencies {
        // Lombok
        annotationProcessor "org.projectlombok:lombok:${project.ext.lombokVersion}"
        compileOnly "org.projectlombok:lombok:${project.ext.lombokVersion}"

        // also Lombok for tests:
        testAnnotationProcessor "org.projectlombok:lombok:${project.ext.lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${project.ext.lombokVersion}"

        // Tests
        testCompile "junit:junit:${project.ext.junitVersion}"
        testCompile group: "org.assertj", name: "assertj-core", version: assertjVersion
        testCompile "org.mockito:mockito-core:${project.ext.mockitoVersion}"
        testCompile "org.hamcrest:hamcrest-integration:${project.ext.hamcrestVersion}"
    }

    jacoco {
        toolVersion = project.ext.jacocoToolVersion
        reportsDir = file("$buildDir/customJacocoReportDir")
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination file("${buildDir}/jacocoHtml")
        }
    }

    // This disables the pedantic doclint feature of JDK8
    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    /*
     * common information for Bintray publishing
     */
    ext {
        pomConfig = {

            inceptionYear '2015'

            scm {
                connection "scm:git:${project.scmUrl}"
                developerConnection "scm:git:${project.scmUrl}"
                url project.websiteUrl
            }

            issueManagement {
                system 'GitHub'
                url project.issueTrackerUrl
            }

            licenses {
                license([:]) {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            organization {
                name 'QAware GmbH'
                url 'https://www.qaware.de'
            }

            developers {
                developer {
                    id 'lreimer'
                    name 'Mario-Leander Reimer'
                    email 'mario-leander.reimer@qaware.de'
                    organization 'QAware GmbH'
                    organizationUrl 'https://www.qaware.de'
                    roles {role 'Developer'}
                }
                developer {
                    id 'tilmanseifert'
                    name 'Tilman Seifert'
                    email 'tilman.seifert@qaware.de'
                    organization 'QAware GmbH'
                    organizationUrl 'https://www.qaware.de'
                    roles {role 'Developer'}
                }
            }
        }
    }

    bintray {
        user = project.hasProperty('bintrayUsername') ? project.bintrayUsername : 'unknown'
        key = project.hasProperty('bintrayApiKey') ? project.bintrayApiKey : 'unknown'
        configurations = ['archives']
        dryRun = false
        publish = true
        pkg {
            repo = project.bintrayRepo
            name = project.name
            desc = project.description
            licenses = ['Apache-2.0']
            labels = ['qaware', 'architecture', 'validation']
            websiteUrl = project.websiteUrl
            issueTrackerUrl = project.issueTrackerUrl
            vcsUrl = project.scmUrl
            publicDownloadNumbers = true
            version {
                name = project.version
                desc = project.description
                released = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZZ")
                vcsTag = "v${project.version}"
                mavenCentralSync {
                    sync = false
                }
            }
        }
    }
}

task build(description: "no-op task, needed for the release plugin") {}
